import logging
import aiogram
import qrcode
import requests
import os
import threading

from db import db, create_db
from random import randint

from aiogram.utils.deep_linking import decode_payload
from aiogram.utils.deep_linking import get_start_link
from aiogram.types import Message

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

token = "5653477884:AAGQC90jz5EPbRvxlUm5EvGziASZ_DQmdrg" #–°–Æ–î–ê –¢–û–ö–ï–ù

wallet_QIWI = "79889912552" #–°–Æ–î–ê –ù–û–ú–ï–† –ö–ò–í–ò
wallet_BTC = "bc1qm2v6jkykxkzwn0yucn7ywzmn9hmc8hv47p8sxh" #–°–Æ–î–ê –ö–û–®–ï–õ–ï–ö –ë–¢–ö

admin_id = "5352228966" # –°–Æ–î–ê –ê–ô–î–ò –ê–î–ú–ò–ù–ê

cities = [
    "–ú–æ—Å–∫–≤–∞",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "–ê–¥–ª–µ—Ä",
    "–ê–Ω–∞–ø–∞",
    "–ê–±–∞–∫–∞–Ω",
    "–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫",
    "–ê–Ω–≥–∞—Ä—Å–∫",
    "–ê—Ä–∑–∞–º–∞—Å",
    "–ê—Ä–º–∞–≤–∏—Ä",
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫",
    "–ê—á–∏–Ω—Å–∫",
    "–ë–∞–ª–∞–∫–æ–≤–æ",
    "–ë–∞–ª–∞—à–∏—Ö–∞",
    "–ë–∞—Ç–∞–π—Å–∫",
    "–ë–µ–ª–≥–æ—Ä–æ–¥",
    "–ë–µ—Ä–¥—Å–∫",
    "–ë–∏–π—Å–∫",
    "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫",
    "–ë—Ä–∞—Ç—Å–∫",
    "–ë—Ä—è–Ω—Å–∫",
    "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑",
    "–í–ª–∞–¥–∏–º–∏—Ä",
    "–í–æ–ª–∂—Å–∫–∏–π",
    "–í–æ—Ä–æ–Ω–µ–∂",
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–ì—Ä–æ–∑–Ω—ã–π",
    "–î–∑–µ—Ä–∂–∏–Ω—Å–∫",
    "–î–æ–º–æ–¥–µ–¥–æ–≤–æ",
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–ñ–µ–ª–µ–∑–Ω–æ–≥–æ—Ä—Å–∫",
    "–ò–≤–∞–Ω–æ–≤–æ",
    "–ò–∂–µ–≤—Å–∫",
    "–ô–æ—à–∫–∞-–û–ª–∞",
    "–ò—Ä–∫—É—Ç—Å–∫",
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
    "–ö–∞–ª—É–≥–∞",
    "–ö–∞–∑–∞–Ω—å",
    "–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π",
    "–ö–∞—Å–ø–∏–π—Å–∫",
    "–ö–µ–º–µ—Ä–æ–≤–æ",
    "–ö–µ—Ä—á—å",
    "–ö–∏—Ä–æ–≤",
    "–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫",
    "–ö–æ–ª–æ–º–Ω–∞",
    "–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    "–ö—É—Ä–≥–∞–Ω",
    "–ö—É—Ä—Å–∫",
    "–ö—ã–∑—ã–ª",
    "–õ–∏–ø–µ—Ü–∫",
    "–õ—é–±–µ—Ä—Ü—ã",
    "–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫",
    "–ú–∞–π–∫–æ–ø",
    "–ú–∞—Ö–∞—á–∫–∞–ª–∞",
    "–ú—É—Ä–º–∞–Ω—Å–∫",
    "–ú—ã—Ç–∏—â–µ",
    "–ù–∞–∑—Ä–∞–Ω—å",
    "–ù–∞–ª—å—á–∏–∫",
    "–ù–∞—Ö–æ–¥–∫–∞",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª",
    "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–ù–æ—Ä–∏–ª—å—Å–∫",
    "–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π",
    "–û–¥–∏–Ω—Ü–æ–≤–æ",
    "–û–±–Ω–∏–Ω—Å–∫",
    "–û–º—Å–∫",
    "–û—Ä—ë–ª",
    "–û—Ä–µ–Ω–±—É—Ä–≥",
    "–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ",
    "–û—Ä—Å–∫",
    "–ü–µ–Ω–∑–∞",
    "–ü–µ—Ä–º—å",
    "–ü–µ—Ç—Ä–∞–∑–∞–≤–æ–¥—Å–∫",
    "–ü–æ–¥–æ–ª—å—Å–∫",
    "–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫",
    "–ü—Å–∫–æ–≤",
    "–ü—É—à–∫–∏–Ω–æ",
    "–ü—è—Ç–∏–≥–æ—Ä—Å–∫",
    "–†–∞–º–µ–Ω—Å–∫–æ–µ",
    "–†–æ—Å—Ç–æ–≤-–ù–∞-–î–æ–Ω—É",
    "–†—ã–±–∏–Ω—Å–∫",
    "–†—è–∑–∞–Ω—å",
    "–°–∞–ª–∞–≤–∞—Ç",
    "–°–∞–º–∞—Ä–∞",
    "–°–∞—Ä–∞–Ω—Å–∫",
    "–°–∞—Ä–∞—Ç–æ–≤",
    "–°–µ–≤–∞—Å—Ç–æ–ø–∞–ª—å",
    "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å",
    "–°–º–æ–ª–µ–Ω—Å–∫",
    "–°–æ—á–∏",
    "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
    "–°—Ç–∞—Ä—ã–π –æ—Å–∫–æ–ª–æ–∫",
    "–°—É—Ä–≥—É—Ç",
    "–°—ã–∑—Ä–∞–Ω—å",
    "–°—ã–∫—Ç—ã–≤–∫–∞—Ä",
    "–¢–∞–≥–∞–Ω—Ä–æ–≥",
    "–¢–∞–º–±–æ–≤",
    "–¢–≤–µ—Ä—å",
    "–¢–æ–ª—å—è—Ç—Ç–∏",
    "–¢–æ–º—Å–∫",
    "–¢—É–ª–∞",
    "–¢—é–º–µ–Ω—å",
    "–¢—É–∞–ø—Å–µ",
    "–£–ª–∞–Ω-–£–¥—ç",
    "–£–ª—å—è–Ω–æ–≤—Å–∫",
    "–£—Å—Å—É—Ä–∏–π—Å–∫",
    "–£—Ñ–∞",
    "–•–∞–±–∞—Ä–æ–≤—Å–∫",
    "–•–∞—Å–∞–≤—é—Ä—Ç",
    "–•–∏–º–∫–∏",
    "–ß–µ–±–æ–∫—Å–∞—Ä—ã",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫",
    "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü",
    "–ß–µ—Ä–∫–µ—Å—Å–∫",
    "–ß–∏—Ç–∞",
    "–®–∞—Ö—Ç—ã",
    "–©–µ–ª–∫–æ–≤–æ",
    "–≠–Ω–≥–µ–ª—å—Å",
    "–Ø–∫—É—Ç—Å–∫",
    "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
    "–Ø–ª—Ç–∞"
]

stuffs = [
    "üç´ –ì–∞—à–∏—à (ice-o-later) - 1–≥—Ä 2000‚ÇΩ",
    "üç´ –ì–∞—à–∏—à (ice-o-later) - 5–≥—Ä 8000‚ÇΩ",
    "üç´ –ì–∞—à–∏—à (ice-o-later) - 10–≥—Ä 12500‚ÇΩ",
    "üå≥ –ë–æ—à–∫–∏ (OG Kush) - 1–≥—Ä 1900‚ÇΩ",
    "üå≥ –ë–æ—à–∫–∏ (OG Kush) - 2–≥—Ä 3500‚ÇΩ",
    "üå≥ –ë–æ—à–∫–∏ (OG Kush) - 5–≥—Ä 7000‚ÇΩ",
    "üßä –°–∫–æ—Ä–æ—Å—Ç—å A-PVP - 0,5–≥—Ä 1600‚ÇΩ",
    "üßä –°–∫–æ—Ä–æ—Å—Ç—å A-PVP - 1–≥—Ä 2900‚ÇΩ",
    "üßä –°–∫–æ—Ä–æ—Å—Ç—å A-PVP - 5–≥—Ä 9000‚ÇΩ",
    "üíé –ú–µ—Ñ–µ–¥—Ä–æ–Ω (–∫—Ä–∏—Å) - 0,5–≥—Ä 1650‚ÇΩ",
    "üíé –ú–µ—Ñ–µ–¥—Ä–æ–Ω (–∫—Ä–∏—Å) - 1–≥—Ä 2950‚ÇΩ",
    "üíé –ú–µ—Ñ–µ–¥—Ä–æ–Ω (–∫—Ä–∏—Å) - 5–≥—Ä 12000‚ÇΩ",
    "üå´ –ê–º—Ñ–µ—Ç–∞–º–∏–Ω - 1–≥—Ä 2550‚ÇΩ",
    "üå´ –ê–º—Ñ–µ—Ç–∞–º–∏–Ω - 2–≥—Ä 4700‚ÇΩ",
    "üç≠ –≠–∫—Å—Ç–∞–∑–∏ (Red Bull) - 5—à—Ç 6000‚ÇΩ",
    "üç≠ –≠–∫—Å—Ç–∞–∑–∏ (Red Bull) - 10—à—Ç 10000‚ÇΩ",
    "üç≠ –≠–∫—Å—Ç–∞–∑–∏ (Red Bull) - 20—à—Ç 15000‚ÇΩ",
    "üí• –ì–µ—Ä–æ–∏–Ω 666 - 0.5–≥—Ä 2800‚ÇΩ",
    "üí• –ì–µ—Ä–æ–∏–Ω 666 - 1–≥—Ä 4900‚ÇΩ",
    "üí• –ì–µ—Ä–æ–∏–Ω 666 - 5–≥—Ä 15000‚ÇΩ",
    "üåà LSD 220 mkg - 1—à—Ç 1150‚ÇΩ",
    "üåà LSD 220 mkg - 2—à—Ç 2000‚ÇΩ",
    "üåà LSD 220 mkg - 3—à—Ç 3600‚ÇΩ",
    "üíä –õ–∏—Ä–∏–∫–∞ 300 - 1 –ª–∏—Å—Ç 3850‚ÇΩ"
]

treasures = [
    "üß≤ –ú–∞–≥–Ω–∏—Ç",
    "‚õ≥Ô∏è –ü—Ä–∏–∫–æ–ø"
]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
bot = Bot(token=token)
dp = Dispatcher(bot=bot, storage=MemoryStorage())


def rate(amount): 
    s = requests.get(f"https://min-api.cryptocompare.com/data/price?fsym=RUB&tsyms=BTC")
    raw = s.json()

    BTC = float(raw["BTC"]) * float(amount)

    return [BTC]

def order_pay():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn_1 = types.KeyboardButton(text="QIWI")
    btn_2 = types.KeyboardButton(text="Bitcoin")

    keyboard.add(btn_1, btn_2)

    return keyboard

async def starting(user_id, user_un):
    if not db.user_exists(user_id):
        db.add_user(user_id)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    btn_1 = types.KeyboardButton(text="üéÅ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")
    btn_2 = types.KeyboardButton(text="üìù –ü—Ä–∞–≤–∏–ª–∞")
    btn_3 = types.KeyboardButton(text="üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    keyboard.add(btn_1, btn_2, btn_3)

    await bot.send_message(text=f"üéä –°–ø–∞—Å–∏–±–æ {user_un} —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.\n\n"
                                 "üëä –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∏ –ª–µ–≥–∫–∏—Ö –ø–æ–¥—ä—ë–º–æ–≤!", chat_id=user_id, reply_markup=keyboard)

async def choose(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for stuff in stuffs: 
        btn = types.KeyboardButton(text=stuff)
        keyboard.add(btn)

    back = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    keyboard.add(back)

    await bot.send_message(text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä üç¨", chat_id=user_id, reply_markup=keyboard)

async def district(user_id, user_un):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    keyboard.add(back)

    await bot.send_message(text=f"{user_un} —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω –∏–ª–∏ —É–ª–∏—Ü—É, –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º –±–æ—Ç –ø–æ–¥–±–µ—Ä—ë—Ç –≤–∞–º –±–ª–∏–∂–∞–π—à–∏–π –∞–¥—Ä–µ—Å –∑–∞–∫–ª–∞–¥–∫–∏ –∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∑–∂–µ –≤—ã–¥–∞—Å—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: —Ñ–æ—Ç–æ+–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã+–æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
                                f"–ü—Ä–∏–º–µ—Ä: –°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞ –ö–∞—Ä–∞–º–∑–∏–Ω–∞\n\n"
                                f"‚ùóÔ∏è–ï—Å–ª–∏ –í—ã –ù–ï–í–ï–†–ù–û —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ä–∞–π–æ–Ω –∏–ª–∏ —É–ª–∏—Ü—É, —Ç–æ –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–¥–æ–º–Ω–æ (—Å–ª—É—á–∞–π–Ω–æ) –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –í–∞–º–∏ –≥–æ—Ä–æ–¥–µ.‚ùóÔ∏è\n\n", chat_id=user_id, reply_markup=keyboard)

async def hide(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    for treasure in treasures: 
        btn = types.KeyboardButton(text=treasure)
        keyboard.add(btn)

    back = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    keyboard.add(back)

    await bot.send_message(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–ª–∞–¥–∞", chat_id=user_id, reply_markup=keyboard)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_un = message.from_user.username
    
    args = message.get_args()
    payload = decode_payload(args)
    if not payload == "":
        if user_un is None:
            await bot.send_message(text=f"<b>ü™Ñ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏!</b>\n"
                                        f"<b>üôåüèª –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{payload}</code>\n\n"
                                        f"<b>üÜî –ê–π–¥–∏:</b> <a href='tg://user?id={user_id}'>{user_id}</a>\n", chat_id=admin_id, parse_mode=types.ParseMode.HTML)
        else:
            await bot.send_message(text=f"<b>ü™Ñ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏!</b>\n"
                                        f"<b>üôåüèª –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{payload}</code>\n\n"
                                        f"<b>üÜî –ê–π–¥–∏:</b> <a href='tg://user?id={user_id}'>{user_id}</a>\n"
                                        f"<b>üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user_un}</b>\n", chat_id=admin_id, parse_mode=types.ParseMode.HTML)


    await starting(user_id, user_un)

@dp.message_handler(text=["üîô –ù–∞–∑–∞–¥", "üîô –û—Ç–º–µ–Ω–∞"])
async def back(message: types.Message):
    user_id = message.from_user.id
    user_un = message.from_user.username
    
    await starting(user_id, user_un)

@dp.message_handler(text=["üéÅ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä"])
async def rules(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for city in cities: 
        btn = types.KeyboardButton(text=city)
        keyboard.add(btn)

    back = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    keyboard.add(back)

    await message.answer(text="üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n\n"
                              "(–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–ª–∞–¥—ã —Ç–æ–ª—å–∫–æ –≤ –†–æ—Å—Å–∏–∏)", reply_markup=keyboard)

@dp.message_handler(text=["üìù –ü—Ä–∞–≤–∏–ª–∞"])
async def rules(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    keyboard.add(back)

    await message.answer(text="1) –ù–µ —Ö–∞–º–∏—Ç—å –∏ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–ø–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö!\n\n"
                              "2) –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª—É—á–∏–ª—Å—è –Ω–µ–Ω–∞—Ö–æ–¥, —Ç–æ –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2-—É—Ö —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24-—Ö —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏!\n\n"
                              "3) –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ–≤–µ—Å, –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—Å–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞, —Ñ–æ—Ç–æ —Å—Ç–∞—Ñ—Ñ–∞ –Ω–∞ –≤–µ—Å–∞—Ö –±–µ–∑ –∑–∏–ø–∞, –∞ —Ç–∞–∫–∂–µ —Ñ–æ—Ç–æ –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤–µ—Å–∞—Ö!\n\n"
                              "4) –ü–µ—Ä–µ–¥–∞—á–∞ –∞–¥—Ä–µ—Å–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–∞!\n\n"
                              "–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!", reply_markup=keyboard)

@dp.message_handler(text=["üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞"])
async def rules(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    keyboard.add(btn_1)

    await message.answer(text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º—ã - –ø–∏—à–∏—Ç–µ\n\n"
                              "@Operator_Anya", reply_markup=keyboard)

# –ê–î–ú–ò–ù
@dp.message_handler(chat_type=[types.ChatType.PRIVATE], commands="admin")
async def admin(message: types.Message):
    user_id = message.from_user.id
    user_un = message.from_user.full_name

    if str(user_id) == str(admin_id):
        await bot.send_message(text=f"<b>üéó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_un}!</b>\n\n"
                                    f"üëÅ /make ‚Äì <b>–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É</b>  <code>(–ü—Ä–∏–º–µ—Ä: /make —Ç–µ–∫—Å—Ç)</code>\n"
                                    f"üìä /stats ‚Äì <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
                                    f"üìÑ /send ‚Äì <b>–†–∞—Å—Å—ã–ª–∫–∞</b> <code>(–ü—Ä–∏–º–µ—Ä: /send —Ç–µ–∫—Å—Ç)</code>", chat_id=user_id, parse_mode=types.ParseMode.HTML)

@dp.message_handler(chat_type=[types.ChatType.PRIVATE], commands="stats")
async def stats(message: types.Message):
    user_id = message.from_user.id

    if str(user_id) == str(admin_id):
        await bot.send_message(text=f"<b>ü™Ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                                    f"<b>üü© –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> <code>{db.get_all_users()[0][0]}</code>\n"
                                    f"<b>üü• –ù–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> <code>{db.get_no_active_users()[0][0]}</code>", chat_id=user_id, parse_mode=types.ParseMode.HTML)

@dp.message_handler(chat_type=[types.ChatType.PRIVATE], commands="send")
async def send(message: types.Message):
    user_id = message.from_user.id

    if str(user_id) == str(admin_id):
        if message.text == "/send":
            await bot.send_message(text=f"<b>–û–∫–µ–π, –∞ —á—Ç–æ –ø–∏—Å–∞—Ç—å –∏–º?..</b>", chat_id=user_id, parse_mode=types.ParseMode.HTML) 

            return

        text = message.text[len("/send "):]
        
        users = db.get_users()
        active = 0
        no_active = 0
        for row in users:
            try:
                await bot.send_message(row[0], text, parse_mode=types.ParseMode.HTML) 

                if int(row[1]) != 1:
                    db.set_active(row[0], 1)

                active = active + 1
            except:
                db.set_active(row[0], 0)
                no_active = no_active + 1

                continue
        
        await bot.send_message(text=f"<b>üéâ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                                    f"<b>üéä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{active}</code>\n"
                                    f"<b>üìõ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{no_active}</code>", chat_id=user_id, parse_mode=types.ParseMode.HTML)

@dp.message_handler(chat_type=[types.ChatType.PRIVATE], commands="make")
async def make(message: types.Message):
    user_id = message.from_user.id

    if str(user_id) == str(admin_id):
        if message.text == "/make":
            await bot.send_message(text=f"<b>–û–∫–µ–π, –∞ –∫–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É?..</b>", chat_id=user_id, parse_mode=types.ParseMode.HTML) 

            return

        text = message.text[len("/make "):]
        
        link = await get_start_link(text, encode=True)
        
        await bot.send_message(text=f"<b>üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                                    f"<b>üéä –°—Å—ã–ª–∫–∞:</b> <code>{link}</code>\n"
                                    f"<b>üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{text}</code>", chat_id=user_id, parse_mode=types.ParseMode.HTML)

# –ü–†–û–ß–ï–ï
@dp.message_handler(text=["QIWI"])
async def type_pay(message: types.Message):
    user_id = message.from_user.id
    #link = f"<a href='https://qiwi.com/payment/form/99?amountInteger=1111&amountFraction=0&currency=643&extra['comment']=222&extra['account']={wallet_QIWI}&blocked[0]=sum&blocked[1]=comment&blocked[2]=account'>–æ–ø–ª–∞—Ç–∏—Ç—å</a>"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    check = types.KeyboardButton(text="üîé –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É")
    back = types.KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")
    keyboard.add(check, back)

    await message.answer(text=f"1Ô∏è‚É£ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
                              f"‚ûñ QIWI\n\n"
                              f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –±–æ–ª—å—à–µ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –æ–ø–ª–∞—Ç—É.\n\n"
                              f"2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –ª–∏–±–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.\n\n"
                              f"3Ô∏è‚É£ –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –æ—Ç 2—É—Ö –¥–æ 5—Ç–∏ –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –≤—ã—à–ª–µ—Ç –≤–∞–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É.\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                              f"ü•ù QIWI –∫–æ—à–µ–ª–µ–∫: <code>{wallet_QIWI}</code>\n"
                              
                              
                            # f"{link}"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                              f"‚ùóÔ∏è –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –û–ü–ï–†–ê–¢–û–†–£ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π‚ùóÔ∏è\n"
                              f"‚û°Ô∏è @Operator_Anya\n\n"
                              f"üëç –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏ –ª–µ–≥–∫–æ–≥–æ –ø–æ–¥—ä—ë–º–∞!" ,reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

@dp.message_handler(text=["Bitcoin"])
async def type_pay(message: types.Message):
    user_id = message.from_user.id

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    check = types.KeyboardButton(text="üîé –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É")
    back = types.KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")
    keyboard.add(back)

    file_path = str(user_id)+".png"
    qrcode_gen = qrcode.make(f"bitcoin: {wallet_BTC}")
    qr = qrcode_gen.save(file_path)

    await message.answer_photo(caption=f"1Ô∏è‚É£ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
                                       f"‚ûñ BITCOIN\n\n"
                                       f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –±–æ–ª—å—à–µ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –æ–ø–ª–∞—Ç—É.\n\n"
                                       f"2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –ª–∏–±–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.\n\n"
                                       f"3Ô∏è‚É£ –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –æ—Ç 2—É—Ö –¥–æ 5—Ç–∏ –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –≤—ã—à–ª–µ—Ç –≤–∞–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É.\n"
                                       f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                       f"ü•ù Bitcoin: <code>{wallet_BTC}</code>\n"
                                       f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                       f"‚ùóÔ∏è –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –û–ü–ï–†–ê–¢–û–†–£ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π‚ùóÔ∏è\n"
                                       f"‚û°Ô∏è @Operator_Anya\n\n"
                                       f"üëç –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏ –ª–µ–≥–∫–æ–≥–æ –ø–æ–¥—ä—ë–º–∞!", photo=open(file_path, 'rb'), reply_markup=keyboard, parse_mode="HTML")
    os.remove(file_path)

@dp.message_handler(text=["üîé –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É"])
async def check_pay(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")
    keyboard.add(back)

    await message.answer(text="üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –±–æ—Ç—É —Ñ–æ—Ç–æ, –ª–∏–±–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ!", reply_markup=keyboard)

@dp.message_handler()
async def start(message: types.Message):
    user_id = message.from_user.id
    user_un = message.from_user.username

    if user_un is None:
        user_un = message.from_user.full_name
    
    if message.text in cities:
        await choose(user_id)
    elif message.text in stuffs:
        await district(user_id, user_un)
    elif message.text in treasures:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=order_pay())
    elif message.text:
        await hide(user_id)

async def on_startup(dispatcher):
    create_db()

def anti_sleep():
	while True:
		try:
			randomic = random.randint(0, 10)
			time.sleep(1200)
		except:
			pass
		

if __name__ == '__main__':
    x1 = threading.Thread(target=anti_sleep, args=())
    x1.start()
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
